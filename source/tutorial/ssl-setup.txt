:noprevnext:

==============================
Configure SSL for {+bi-short+}
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

For |bi-short| to transmit data securely, you should enable Secure
Socket Layer (SSL) encryption on your MongoDB instance, your
:binary:`~bin.mongosqld` instance, and in your BI tool. A complete
description of SSL configuration is outside the scope of this document,
but this tutorial outlines the process for creating your own SSL
certificates for testing purposes and starting the MongoDB components
with SSL enabled.

.. important::

   The procedures described in this tutorial are for testing purposes
   only. A production environment should use SSL certificates issued
   by a recognized certificate authority (CA).

Prerequisites
-------------

- A MongoDB user with sufficient permissions to run
  :binary:`~bin.mongosqld`. For more information about user permissions
  and |bi-short|, see :ref:`User Permissions for Cached Sampling
  <cached-sampling-user-permissions>`.
- A :binary:`~bin.mongod` instance which you can start and stop.
- A :binary:`~bin.mongosqld` instance which you can start and stop.
- `OpenSSL <https://www.openssl.org/source/>`_
- The `MySQL shell <https://dev.mysql.com/downloads/shell/>`_

Note on Cluster Availability
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For MongoDB :manual:`replica sets </replication>`, including
:manual:`sharded replica sets </sharding>`, use a :manual:`rolling
upgrade procedure </tutorial/perform-maintence-on-replica-set-members/>`
to ensure that the cluster can continue to serve read
operations while the procedure is ongoing. While the replica set
primary is undergoing upgrade procedures, database applications must
either hold or retry write operations until after the automatic
failover and election cycle completes. See :manual:`Replica Set
Availability </core/replica-set-high-availability>` for more
information.

Create and Test Self-Signed Certificates
----------------------------------------

This tutorial contains instructions on creating several files
which allow a :binary:`~bin.mongosqld` process to accept OpenSSL
encrypted connections from an SQL client, such as the MySQL shell,
and make an encrypted connection with a :binary:`~bin.mongod` instance.
We create two `.pem files
<https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail>`_,
each of which consists of an encryption key and a self-signed
SSL certificate.

.. tabs-platforms::

   tabs:
     - id: windows
       name: Windows
       content: |
         .. include:: /includes/steps/windows-ssl-config.rst

     - id: macos
       name: macOS
       content: |
         .. include:: /includes/steps/mac-ssl-config.rst
