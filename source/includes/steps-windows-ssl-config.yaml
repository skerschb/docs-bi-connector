title: Create a Certificates Directory
ref: create-certs-dir
level: 4
stepnum: 1
content: |
  1. Using the Windows ``cmd`` shell, create a directory to hold
     your certificates.  This tutorial uses ``C:\opt\certs``.

     .. code-block:: none

        mkdir C:\opt\certs
        cd C:\opt\certs

  2. This tutorial assumes that your OpenSSL directory
     is at ``C:\OpenSSL``. If it is located somewhere
     else on your system, either edit the commands
     appropriately or move the directory to
     ``C:\OpenSSL``.

     If your ``C:\OpenSSL\bin`` directory does not contain a
     configuration file named ``openssl.cfg``, create one.
     An example configuration file is provided here:

     .. code-block:: none

        #
        # OpenSSL configuration file.
        #

        # Establish working directory.

        dir				= .

        [ ca ]
        default_ca			= CA_default

        [ CA_default ]
        serial			= $dir/serial
        database			= $dir/certindex.txt
        new_certs_dir			= $dir/certs
        certificate			= $dir/cacert.pem
        private_key			= $dir/private/cakey.pem
        default_days			= 365
        default_md			= md5
        preserve			= no
        email_in_dn			= no
        nameopt			= default_ca
        certopt			= default_ca
        policy			= policy_match

        [ policy_match ]
        countryName			= match
        stateOrProvinceName		= match
        organizationName		= match
        organizationalUnitName	= optional
        commonName			= supplied
        emailAddress			= optional

        [ req ]
        default_bits			= 1024
        default_keyfile		= key.pem
        default_md			= md5
        string_mask			= nombstr
        distinguished_name		= req_distinguished_name
        req_extensions		= v3_req

        [ req_distinguished_name ]
        # Variable name			Prompt string
        #-------------------------	----------------------------------
        0.organizationName		= Organization Name (company)
        organizationalUnitName	= Organizational Unit Name (department, division)
        emailAddress			= Email Address
        emailAddress_max		= 40
        localityName			= Locality Name (city, district)
        stateOrProvinceName		= State or Province Name (full name)
        countryName			= Country Name (2 letter code)
        countryName_min		= 2
        countryName_max		= 2
        commonName		    	= Common Name (hostname, IP, or your name)
        commonName_max		= 64

        # Default values for the above, for consistency and less typing.
        # Variable name			Value
        #------------------------	------------------------------
        0.organizationName_default	= My Company
        localityName_default	 	= My Town
        stateOrProvinceName_default	= State or Providence
        countryName_default		= US

        [ v3_ca ]
        basicConstraints		= CA:TRUE
        subjectKeyIdentifier		= hash
        authorityKeyIdentifier	= keyid:always,issuer:always

        [ v3_req ]
        basicConstraints		= CA:FALSE
        subjectKeyIdentifier		= hash

  3. Set up an environment variable for later use.

     .. code-block:: none

        set OPENSSL_CONF=C:\OpenSSL\bin\openssl.cfg
---
title: Generate a Self-Signed Certificate Authority
ref: gen-private-key
level: 4
stepnum: 2
content: |

  1. Change directory to ``C:\opt\certs``.

     .. code-block:: none

        cd C:\opt\certs

  2. Start the OpenSSL application.

     .. code-block:: none

        C:\OpenSSL\bin\openssl.exe

     .. figure:: /images/bi-connector/ssl-cmd-prompt.png
        :alt: Screenshot of OpenSSL command prompt
        :figwidth: 645px

  3. The following command generates and outputs a private key to
     ``mdbprivate.key``.

     .. code-block:: sh

        genrsa -out C:\opt\certs\mdbprivate.key -aes256 -passout pass:password

  4. The following command generates and outputs a certificate
     authority file to ``mdbca.crt``.

     .. include:: /includes/fact-common-name.rst

     .. code-block:: sh

        req -x509 -new -key C:\opt\certs\mdbprivate.key -days 1000 -out C:\opt\certs\mdbca.crt -passin pass:password

  We now have two files: The ``mdbca.crt`` certificate authority file,
  and the ``mdbprivate.key`` key used to sign that request.
---
title: Generate a PEM Certificate for the MongoDB Server 
ref: gen-mongodb-key
level: 4
stepnum: 3
content: |
  The following command generates a key for the :binary:`~bin.mongod`
  process to use and a Certificate Signing Request (CSR).
  For this step, the ``Common Name`` response must
  be the Fully Qualified Domain Name (FQDN) of the server where your
  :binary:`~bin.mongod` instance runs, i.e. ``www.example.com``.

  Enter the following command at the OpenSSL prompt:

  .. code-block:: sh

     req -new -nodes -newkey rsa:2048 -keyout .\mdb.key -out .\mdb.csr
---
title: Sign the mongodb CSR
ref: sign-mongodb-csr
level: 4
stepnum: 4
content: |
  Enter the following command at the OpenSSL prompt:

  .. code-block:: sh

     x509 -CA .\mdbca.crt -CAkey .\mdbprivate.key -CAcreateserial -req -days 1000 -in .\mdb.csr -out .\mdb.crt -passin pass:password
---
title: Create a PEM file for the MongoDB server
ref: create-pem-file
level: 4
stepnum: 5
content: |
  A ``.pem`` file consists of a key and a certificate concatenated
  together. To create a ``.pem`` file for your MongoDB instance to use,
  exit the OpenSSL prompt and enter the following command at the
  ``cmd`` prompt in the ``C:\opt\certs`` directory:

  .. code-block:: sh

     copy .\mdb.key + .\mdb.crt mdb.pem

  You should now have the following files in your certificates
  directory:

  .. code-block:: sh
     :copyable: false

     mdb.crt
     mdb.csr
     mdb.key
     mdb.pem
     mdbca.crt
     mdbprivate.key

  If any are missing, go back and review the previous steps, checking
  for errors.
---
title: Update ``mongod`` configuration file
ref: update-conf
level: 4
stepnum: 6
content: |

  To configure :binary:`~bin.mongod` to require SSL for incoming
  connections, modify your configuration file as follows.
  Your values may vary, depending on where you created your SSL files.

  .. list-table::
     :header-rows: 1
     :widths: 50 50

     * - Option
       - Value

     * - :manual:`net.ssl.mode </reference/configuration-options/#net.ssl.mode>`
       - ``requireSSL``

     * - :manual:`net.ssl.PEMKeyFile </reference/configuration-options/#net.ssl.PEMKeyFile>`
       - ``C:\opt\certs\mdb.pem``

     * - :manual:`net.ssl.CAFile </reference/configuration-options/#net.ssl.CAFile>`
       - ``C:\opt\certs\mdbca.crt``

     * - :manual:`net.ssl.clusterFile </reference/configuration-options/#net.ssl.clusterFile>`
       - ``C:\opt\certs\mdb.pem``

     * - :manual:`security.clusterAuthmode </reference/configuration-options/#security.clusterAuthMode>`
       - ``x509``

  The following example configuration file contains directives for
  SSL connections and :manual:`x.509 </core/security-x.509>`
  authentication.

  .. note::

     The following is an example ``mongod`` configuration file. Your
     configuration file may require additional or different options.

  .. code-block:: sh

     systemLog:
        destination: file
        path: 'C:\data\mongod.log'
        logAppend: true
     net:
        bindIp: <step-3-FQDN>
        port: 27017
        ssl:
           mode: requireSSL
           PEMKeyFile: 'C:\opt\certs\mdb.pem'
           CAFile: 'C:\opt\certs\mdbca.crt'
           clusterFile: 'C:\opt\certs\mdb.pem'
     security:
        clusterAuthMode: x509
     storage:
        dbPath: 'C:\data\db'

  If you prefer to start ``mongod`` with command-line options instead
  of a configuration file, see :binary:`~bin.mongosqld` for equivalent
  options.

---
title: Restart your ``mongod`` server.
ref: restart-server
level: 4
stepnum: 7
content: |
  .. code-block:: none

     mongod.exe --config C:\path\to\mongod.conf
---
title: Test your connection with the ``mongo`` shell.
ref: test-connection
level: 4
stepnum: 8
content: |
  Connect to your server with the :binary:`~bin.mongo` shell to test
  your SSL connection. Your :binary:`~bin.mongo` command needs the
  following SSL options:
  
  .. list-table::
     :header-rows: 1
     :widths: 40 60
  
     * - Option
       - Value
  
     * - :manual:`--ssl </reference/program/mongo/#cmdoption-mongo-ssl>`
       - none
  
     * - :manual:`--sslCAFile </reference/program/mongo/#cmdoption-mongo-sslCAFile>`
       - ``C:\opt\certs\mdbca.crt`` (file generated in step 2.4)
  
     * - :manual:`--sslPEMKeyFile </reference/program/mongo/#cmdoption-mongo-sslPEMKeyFile>`
       - ``C:\opt\certs\mdb.pem`` (file generated in step 5)

  .. code-block:: sh

     .\mongo.exe --ssl --host <step3-common-name> --sslCAFile "C:\opt\certs\mdbca.crt" --sslPEMKeyFile "C:\opt\certs\mdb.pem"

  Edit your options appropriately.

---
title: Create a key and a CSR for {+bi-short+}
ref: create-key-msqld
level: 4
stepnum: 9
content: |
  The ``Common Name`` entry for this CSR should match the FQDN of the
  server where you run :binary:`~bin.mongosqld`.

  .. note::

     The ``Common Name`` entry for this CSR must be different from the
     ``Common Name`` entry for the first CSR you created, in step 2.

  Start the OpenSSL application and enter the following command at the
  OpenSSL prompt:

  .. code-block:: sh

     req -new -nodes -newkey rsa:2048 -keyout .\bi.key -out .\bi.csr
---
title: Sign the {+bi-short+} certificate
ref: sign-msqld-cert
level: 4
stepnum: 10
content: |
  Enter the following command at the OpenSSL prompt:

  .. code-block:: sh

     x509 -CA .\mdbca.crt -CAkey .\mdbprivate.key -CAcreateserial -req -days 1000 -in .\bi.csr -out .\bi.crt -passin pass:password

---
title: Create a {+bi-short+} PEM file
ref: create-msqld-pem
level: 4
stepnum: 11
content: |

  Exit the OpenSSL application and enter the following command at the
  ``cmd`` prompt:

  .. code-block:: sh

     copy .\bi.key + .\bi.crt bi.pem

---
title: Start ``mongosqld``
ref: start-msqld
level: 4
stepnum: 12
content: |
  Your :binary:`~bin.mongosqld` configuration file requires several
  SSL-specific options. Your values may vary, depending on where
  you created your SSL files.

  .. list-table::
     :header-rows: 1
     :widths: 50 50

     * - Option
       - Value

     * - :option:`mongodb.net.ssl.enabled <mongosqld --mongo-ssl>`
       - ``true``

     * - :option:`mongodb.net.ssl.PEMKeyFile <mongosqld --mongo-sslPEMKeyFile>`
       - ``C:\opt\certs\mdb.pem``

     * - :option:`mongodb.net.sslCAFile <mongosqld --mongo-sslCAFile>`
       - ``C:\opt\certs\mdbca.crt``

     * - :option:`net.ssl.mode <mongosqld --sslMode>`
       - ``requireSSL``

     * - :option:`net.ssl.PEMKeyFile <mongosqld --sslPEMKeyFile>`
       - ``C:\opt\certs\bi.pem``

     * - :option:`net.ssl.CAFile <mongosqld --sslCAFile>`
       - ``C:\opt\certs\mdbca.crt``

  The following example :ref:`configuration file
  <config-format>` uses files located in the
  ``C:\opt\certs`` directory. It specifies a username and password
  which correspond to a MongoDB user with sufficient :ref:`permissions
  <cached-sampling-user-permissions>` to
  run :binary:`~bin.mongosqld` and read from the ``test`` database.

  .. code-block:: yaml

     systemLog:
       logAppend: false
       path: 'C:\logs\mongosqld.log'
       verbosity: 2
     
     security:
       enabled: true
     
     mongodb:
       net:
         uri: <step-3-FQDN>
         auth:
           username: <username>
           password: <password>
         ssl:
           enabled: true
           PEMKeyFile: 'C:\opt\certs\mdb.pem'
           CAFile: 'C:\opt\certs\mdbca.crt'
     
     net:
       bindIp: localhost
       port: 3307
       ssl:
         mode: 'requireSSL'
         PEMKeyFile: 'C:\opt\certs\bi.pem'
         CAFile: 'C:\opt\certs\mdbca.crt'
     
     schema:
       sample:
         namespaces: 'test.*'

  Start :binary:`~bin.mongosqld` with the
  :option:`--config <mongosqld --config>` option to use a
  configuration file.

  .. code-block:: ps1

     .\mongosqld --config C:\path\to\mongosqld.conf
---
title: Test with an ODBC Data Source Name (DSN)
ref: dsn-with-ssl
level: 4
stepnum: 14
content: |
  To create an ODBC DSN which connects over SSL, follow the
  instructions in the :doc:`DSN tutorial </tutorial/create-system-dsn>`
  and configure the new DSN with your SSL certificate path
  information.

  .. figure:: /images/bi-connector/ssl-dsn-config.png
     :alt: Screenshot of DSN config screen
     :figwidth: 411px

  On the :guilabel:`Connection` tab of the DSN configuration screen,
  check the box labeled :guilabel:`Enable Cleartext Authentication`.
  
  .. figure:: /images/bi-connector/ssl-dsn-config2.png
     :alt: Screenshot of DSN config screen
     :figwidth: 411px

  Click the :guilabel:`Test` button to test your ODBC
  connection.

  Once your DSN is set up, you can use it to connect to any of several
  BI tools, such as :doc:`Power BI </connect/powerbi>` or
  :doc:`Qlik </connect/qlik>`.
...